Compare and contrast a hash table vs. an STL map. How is a hash table implemented?
If the number of inputs is small, what data structure options can be used instead of a hash table?

在哈希表中，实值的存储位置由其键值对应的哈希函数值所决定，因此，存储在哈希表中的值是无序的。
在哈希表中插入元素和查找元素的时间复杂度都是1（假设冲突很少的情况下）。
实现一个哈希表，冲突处理是必须要考虑的、

对于STL中的map，键值对在其中是根据键排序的。它使用一颗红黑树来保存数据，因此插入和查找元素的时间复杂度都是O(logn)。
而且不需要处理冲突问题。STL中的map适合以下几种情况使用：
1、查找最小元素；
2、查找最大元素；
3、有序地输出元素；
4、查找某个元素，或者是当元素找不到时，查找比它大的最小元素

哈希表是如何实现的？
1、首先需要一个好的哈希函数来确保哈希值是均匀分布的，比如对大质数取模
2、其次需要一个好的冲突解决方法：链表法（chaining，表中元素比较密集时使用此法），
探测法（probing，开放地址法，表中元素比较稀疏时使用此法）
3、动态地增加或者减少哈希表的大小。比如（表中元素数量）/（表大小）大于一个阈值时，就增加哈希表的大小
我们新建一个大的哈希表，然后将旧表中的元素值，通过新的哈希函数映射到新表中去。

如果输入数据规模不大，可以使用STL map来代替哈希表，尽管插入和查找元素的时间复杂度是O(logn)，
但是由于输入数据的规模不大，因此这点时间差别可以忽略不计。
