Given an input file with four billion integers, provide an algorithm to generate an integer which is not contained in the file. 
Assume you have 1 GB of memory.
FOLLOW UP
What if you have only 10 MB of memory?

40亿整数有多大
40 * 10^8 * 4B = 16GB (大约)
这个明显无法一次性装入内存。但是，如果我们使用计算机中的某一位来表示某个数出现与否，就可以减少内存使用量，
比如15出现，则将第15位设置为1，这个就是Bit Map算法。
如果使用Bit Map算法，一个整数使用一位表示出现与否，则所需要的内存大小是：
40 * 10^8 b = 0.5GB
而我们有1GB的内存，因此该算法可行。由于Bit Map只能处理非负数，因此对于有符号整数，可以将所有的数加上0x7FFFFFFF，
将所有的数据移动到正半轴，找到一个满足条件的数字，再减去0x7FFFFFFF即可。

我们遍历文件，将出现的数对应的那一位设置为1，然后遍历这些位，找到第一个是0的位置即可。

假如我们只有10MB的内存，那么Bit Map无济于事了，内存这么小，注定只能分块处理。
我们可以将这么多的数据分成许多块。比如每一个块的大小是1000，那么第一块保存的就是0到999的数。
实际上我们并不保存这些数，而是给每一个块设置一个计数器。这样每次读入一个数，我们就对这个块所属的计数器加1.
处理结束以后，我们寻找一个计数值小于块大小（1000）的块，说明这一段里面一定有数字是文件中所不包含的，接下来就可以单独处理这个块。
可以直接用bit map处理。