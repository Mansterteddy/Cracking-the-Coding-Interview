How would you design the data structures for a very large social network (Facebook, LinkedIn, etc)?
Describe how you would design an algorithm to show the connection, or path, between two people (e.g. Me -> Bod -> Susan -> Jason -> You).

首先不考虑数学规模，先从方法入手

我们可以把每一个人看成一个结点，如果两个人之间是朋友，则这两个结点之间有一条边，那么这样一来我们就可以构建出一张图。
如果要找到两个人之间的联系，即两个人之间间隔哪些人，就要做广度优先搜索（BFS），如果做双向BFS会更快。

但是此时数据规模太大，就会引发问题。

单台机器根本存储不了这么多数据，因此此时应当考虑使用多台机器来处理这个问题。

这样的话，一个人的朋友可能会存在多台机器上，这里就是我们要尽力去优化的部分：

如何减少机器间的跳转机器？

机器间的跳转是非常耗时的，因此不随机跳转，而是批处理，比如一个人，他其中的5个朋友在同一台机器上，
那么跳转到那台机器后，一次性处理它们。

聪明地划分人与机器

由于同一国家的人更有可能是朋友，因此我们并不随机地把人分配到不同的机器上，而是以国家、城市、州等进行划分，
这样也可以减少机器间的跳转次数。

广度优先搜索会标记已访问节点，对于这个问题，如何处理？
有可能同时有很多人在搜索两人间的联系，所以我们可以对每一个搜索要求，使用一个哈希表来记录一个结点是否已经访问过，
这样，不同人之间的搜索请求就不会互相干扰。

其他还有很多值得优化的问题：
1、在真实的世界中，服务器有可能出现故障，怎么办？
2、如何利用缓存？
3、你是否一直搜索直到把图上的结点都遍历一次，如何决定什么时间停止搜索？
4、在真实世界里，你的朋友里，有一些人的朋友会更多。那么通过他是否更有可能让你找到与特定某个人的联系。
你怎么利用这个数据来选择遍历的顺序？